using Kmd.Logic.FileSecurity.Client.ServiceMessages;
using Kmd.Logic.Identity.Authorization;
using Microsoft.Rest;
using System.Net.Http;
using System.Threading.Tasks;

namespace Kmd.Logic.FileSecurity.Client
{
    /// <summary>
    /// Class to use the autogenerated client class to call APIs
    /// </summary>
    public sealed class FileSecurityClient : LogicHttpClientProvider
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="FileSecurityClient"/> class.
        /// </summary>
        /// <param name="httpClient">The HTTP client to use. The caller is expected to manage this resource and it will not be disposed.</param>
        /// <param name="tokenProviderFactory">The Logic access token provider factory.</param>
        /// <param name="options">The required configuration options.</param>
        public FileSecurityClient(HttpClient httpClient, LogicTokenProviderFactory tokenProviderFactory, FileSecurityOptions options)
            : base(httpClient, tokenProviderFactory, options)
        {
        }

        /// <summary>
        /// Creates certificate
        /// </summary>
        /// <param name="createCertificateRequestDetails"></param>
        /// <returns></returns>
        public Task<CreateCertificateResponseDetails> CreateCertificate(CreateCertificateRequestDetails createCertificateRequestDetails)
        {
            var resolvedSubscriptionId = this.ResolveSubscriptionId();
            try
            {
                var certificateDetailsTask = this.Client.SaveCertificatesWithHttpMessagesAsync(
                    resolvedSubscriptionId,
                    createCertificateRequestDetails.Name,
                    createCertificateRequestDetails.Certificate,
                    createCertificateRequestDetails.CertificatePassword);
                return certificateDetailsTask.ValidateBody().ToCreateCertificateResponseDetails();
            }
            catch (HttpOperationException httpOperationException)
            {
                throw httpOperationException.FileSecurityThrow();
            }
        }
    }
}
